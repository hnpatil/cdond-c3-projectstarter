version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow-id >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow-id >>"

node_image: &node_image
  docker:
    - image: circleci/node:13.8.0

aws_cli: &aws_cli
  docker:
    - image: amazon/aws-cli

jobs:
  build-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    <<: *node_image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *aws_cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation describe-stacks \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Stacks[0].Outputs[0].OutputValue" \
            >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    <<: *aws_cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a1:da:26:0a:ca:7a:2b:10:77:5c:bd:0b:f5:75:17:e1"]
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible \
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}   

  run-migrations:
    <<: *node_image
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/XqYHyaz77JvbWZ33V6PM5F/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}   

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]